@inherits LayoutComponentBase
@implements IDisposable
@inject HotKeys HotKeys
@inject NavigationManager NavigationManager

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row px-4">
            <a href="https://github.com/jsakamoto/Toolbelt.Blazor.HotKeys2" target="_blank" class="ml-md-auto about-link">About Blazor HotKeys2</a>
        </div>

        <div class="content px-4">
            <div>
                @Body
            </div>

            <div class="hot-keys-cheat-sheet alert alert-secondary mt-4">
                <span class="key">?</span> ... <span class="description">Open the Hot keys cheat sheet.</span>
            </div>

            <div class="popup-container @(this.HotKeysCheatSheetVisible ? "visible" : "")" @onclick="@(()=> this.SetHotkeysCheatSheetVisible(false))">

                <CheatSheet HotKeysContext="this.HotKeysContext" />

            </div>
        </div>
    </div>
</div>

@code
{
    private HotKeysContext? HotKeysContext;

    private DateTime LastCtrlKeyPressed = DateTime.MinValue;

    private bool HotKeysCheatSheetVisible = false;

    protected override void OnInitialized()
    {
        HotKeysContext = HotKeys.CreateContext()
        .Add(Key.Question, () => SetHotkeysCheatSheetVisible(!this.HotKeysCheatSheetVisible), "", "input[type = button], input[type = checkbox], input[type = color], input[type = file], input[type = image], input[type = radio], input[type = range], input[type = reset], input[type = submit], textarea") // Open/Close the Hot keys cheat sheet.
        .Add(Key.Escape, () => SetHotkeysCheatSheetVisible(false), "", "input[type=button], input[type=checkbox], input[type=color], input[type=file], input[type=image], input[type=radio], input[type=range], input[type=reset], input[type=submit],  textarea") // Close the Hot keys cheat sheet.
        .Add(Code.H, () => GoTo("/"), "Go to Home page.", "textarea, [contenteditable]:not(contenteditable=false)")
        .Add(Code.C, () => GoTo("/counter"), "Go to Counter page.", "input[type=date], input[type=datetime-local], input[type=email], input[type=hidden], input[type=month], input[type=number], input[type=password], input[type=search], input[type=tel], input[type=text], input[type=time], input[type=url], input[type=week], textarea")
        .Add(Code.F, () => GoTo("/fetchdata"), "Go to Fetch data page.")
        .Add(Key.Control, OnCtrlKeyDown, "Double tap to go to Home.");
    }

    private ValueTask GoTo(string url)
    {
        var urlToNavigate = NavigationManager.BaseUri.TrimEnd('/') + "/" + url.TrimStart('/');
        NavigationManager.NavigateTo(urlToNavigate);
        return ValueTask.CompletedTask;
    }

    private void OnCtrlKeyDown()
    {
        var lastCtrlKeyPressed = this.LastCtrlKeyPressed;
        this.LastCtrlKeyPressed = DateTime.Now;

        if ((DateTime.Now - lastCtrlKeyPressed).TotalMilliseconds <= 200)
        {
            this.GoTo("/");
        }
    }

    private void SetHotkeysCheatSheetVisible(bool visible)
    {
        if (this.HotKeysCheatSheetVisible == visible) return;
        this.HotKeysCheatSheetVisible = visible;
    }

    public void Dispose()
    {
        HotKeysContext?.Dispose();
    }
}
